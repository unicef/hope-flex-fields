# Generated by Django 3.2.25 on 2024-07-09 17:33

from django.db import migrations, models
import django.db.models.deletion
import django_regex.fields
import django_regex.validators
import hope_flex_fields.models.base
import strategy_field.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DataChecker",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "DataChecker",
                "verbose_name_plural": "DataCheckers",
            },
            bases=(hope_flex_fields.models.base.ValidatorMixin, models.Model),
        ),
        migrations.CreateModel(
            name="DataCheckerFieldset",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_modified", models.DateTimeField(auto_now=True)),
                ("prefix", models.CharField(blank=True, default="", max_length=30)),
                ("order", models.PositiveSmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="FieldDefinition",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, default="", max_length=500, null=True)),
                ("attrs", models.JSONField(blank=True, default=dict)),
                (
                    "regex",
                    django_regex.fields.RegexField(
                        blank=True, null=True, validators=[django_regex.validators.RegexValidator()]
                    ),
                ),
                ("validation", models.TextField(blank=True, default="", null=True)),
                ("field_type", strategy_field.fields.StrategyClassField()),
            ],
            options={
                "verbose_name": "Field Definition",
                "verbose_name_plural": "Field Definitions",
            },
        ),
        migrations.CreateModel(
            name="Fieldset",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "extends",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="hope_flex_fields.fieldset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fieldset",
                "verbose_name_plural": "Fieldsets",
            },
            bases=(hope_flex_fields.models.base.ValidatorMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FlexField",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, default="", max_length=500, null=True)),
                ("attrs", models.JSONField(blank=True, default=dict)),
                (
                    "regex",
                    django_regex.fields.RegexField(
                        blank=True, null=True, validators=[django_regex.validators.RegexValidator()]
                    ),
                ),
                ("validation", models.TextField(blank=True, default="", null=True)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="instances",
                        to="hope_flex_fields.fielddefinition",
                    ),
                ),
                (
                    "fieldset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fields",
                        to="hope_flex_fields.fieldset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Flex Field",
                "verbose_name_plural": "flex Fields",
            },
        ),
        migrations.AddConstraint(
            model_name="fielddefinition",
            constraint=models.UniqueConstraint(fields=("name",), name="unique_name"),
        ),
        migrations.AddField(
            model_name="datacheckerfieldset",
            name="checker",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="members", to="hope_flex_fields.datachecker"
            ),
        ),
        migrations.AddField(
            model_name="datacheckerfieldset",
            name="fieldset",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="hope_flex_fields.fieldset"),
        ),
        migrations.AddField(
            model_name="datachecker",
            name="fieldsets",
            field=models.ManyToManyField(
                through="hope_flex_fields.DataCheckerFieldset", to="hope_flex_fields.Fieldset"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="flexfield",
            unique_together={("fieldset", "name")},
        ),
    ]
